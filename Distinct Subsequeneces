/*
Analysis:

If S[0] = T[0], then T is a subsequence of S if
the rest of string T is a subsequence the rest of string S,  or
T is a subsequence of the rest of string S

If S[0] != T[0], then T cannot be a subsequence of S; it could only be the subsequence  of the rest of S.

Let S'[i] be the suffix of S beginning from index i, and T'[j] be the suffix of T beginning from index j and f[i][j] is the number of subsequence of S'[i] and T'[j]. By the above analysis, we can get the transition function of DP as

f[i][j] = f[i+1][j+1] + f[i+1][j], if S[i] == T[j]
f[i][j] = f[i+1][j], if S[i] != T[j]

Now consider the end condition: if j reached the end of string T, that means, all chars in T has been satisfied in S  (from the transition function we  can notice that the j increased only when S[i] == T[j]), the subsequence has already been found in S. On the other hand, if the end of string S was reached, and end of string T was not, no subsequence was found.

f[i][j] =1, if j == T.size()
f[i][j] = 0, if I ==S.size() &&  j != T.size()


*/


public class Solution {
    public int numDistinct(String S, String T) {
        if(S.length()<T.length())return 0;
        if(S.length()==T.length()){
            if(S.equals(T))return 1;
            return 0;
        }
        
        int[][] ret=new int[S.length()+1][T.length()+1];
        
        for(int i=0;i<S.length()+1;i++){
            ret[i][T.length()]=1;
        }
        for(int i=0;i<T.length();i++){
            ret[S.length()][i]=0;
        }
        
        for(int i=S.length()-1;i>=0;i--){
            for(int j=T.length()-1;j>=0;j--){
                if(S.charAt(i)==T.charAt(j)){
                    ret[i][j]=ret[i+1][j+1]+ret[i+1][j];
                }
                else{
                    ret[i][j]=ret[i+1][j];
                }
                
            }
        }
        return ret[0][0];
    }
    
}
