public class Solution {
    public int divide(int dividend, int divisor) {
        if(dividend==divisor)return 1;
        
        if(divisor==Integer.MIN_VALUE)return 0;
        
        
        if(divisor==1)return dividend;
        if(divisor==-1)return 0-dividend;
        
        if(dividend==Integer.MIN_VALUE){
            if(divisor>0){
                return divide(dividend+divisor,divisor)-1;
            }
            return 1+divide(dividend-divisor, divisor);
        }
        
        //set limit to prevent overflow
        int c=1;
        for(int i=0;i<30;i++){
            c+=c;
        }
        c--;
        
        
        
        
        
        //convert everything to positive
        int absDividend=Math.abs(dividend);
        int absDivisor=Math.abs(divisor);
        
        int ret=helper(absDividend, absDivisor,c);
        
        if(dividend<0 && divisor<0)return ret;
        if(dividend<0 || divisor<0) return 0-ret;
        
        return ret;
        
        
    }
    
    //recursively compute
    public int helper(int dividend, int divisor, int limit){
        if(dividend==divisor)return 1;
        if(dividend<divisor)return 0;
        int div=divisor;
        int t=divisor;
        int counter=1;
        int tCount=1;
        while(divisor<dividend && divisor<limit){
         
            tCount=counter;
            counter+=counter;
            t=divisor;
            divisor+=divisor;
        }
        
        
      
        
        return tCount+helper(dividend-t,div,limit);
    }
}
