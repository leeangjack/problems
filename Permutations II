public class Solution {
    public List<List<Integer>> permuteUnique(int[] num) {
        List<List<Integer>> ll=new ArrayList<List<Integer>>();
        if(num==null )return ll;
        List<Integer> l=new ArrayList<Integer>();
        ll.add(l);
        if(num.length==0)return ll;
        Arrays.sort(num);
        for(int i=0;i<num.length;i++){
            ll=helper(num[i], ll);
        }
        
        return ll;
    }
    
    //helper method to expand list one number at a time
    public List<List<Integer>> helper(int a, List<List<Integer>> l){
        List<List<Integer>> ll=new ArrayList<List<Integer>>();
        // to keep track of possible repeat
        HashSet<List<Integer>> set=new HashSet<List<Integer>>();
        for(int i=0;i<l.size();i++){
            List<Integer> lt=l.get(i);
            int lim=lt.size();
            for(int j=0;j<=lim;j++){
                //if the current position has the same number, skip
                if(j<lim && lt.get(j)==a)continue;
                else{
                    List<Integer> temp=new ArrayList<Integer>(lt);
                    temp.add(j,a);
                    if(!set.contains(temp)){
                        ll.add(temp);
                        set.add(temp);
                    }
                }
            }
        }
        
        return ll;
    }
}
