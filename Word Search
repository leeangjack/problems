public class Solution {
    public boolean exist(char[][] board, String word) {
        int m=board.length;
        int n=board[0].length;
        if(word.length()==0)return true;
        if(m==0 || n==0) return false;
        if(word.length()>n*m) return false;
        
        
        
        boolean[][] visit=new boolean[m][n];
        
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               if(board[i][j]==word.charAt(0)){
                 
                   if(dfs(board, i,j,word,visit,0)){
                       return true;
                   }
               } 
            }
        }
        
        return false;
        
    }
    
    public boolean dfs(char[][] board, int startX, int startY,  String word, boolean[][] visit, int index){
        int m=board.length;
        int n=board[0].length;
        
        
        if(board[startX][startY]!=word.charAt(index) || visit[startX][startY])return false;
        
        
        if(index==word.length()-1)return true;
        
        visit[startX][startY]=true;
       
        
        
        if(startX-1>=0 && dfs(board, startX-1, startY, word,visit,index+1)){
            
                    return true;
                    
              
        }
        if(startX+1<=m-1 &&  dfs(board, startX+1, startY, word,visit,index+1)){
            
       
                    return true;
                   
                
        
        }
        if(startY+1<=n-1 && dfs(board, startX, startY+1, word,visit,index+1) ){
       
                    return true;
                    
                
        
        }
        if(startY-1>=0 && dfs(board, startX, startY-1, word,visit,index+1)){
            
         return true;
                    
                    
                
        
        }
        
        visit[startX][startY]=false;
        return false;
    }
    
   
}
